# -*- coding: utf-8 -*-
# this file is released under public domain and you can use without limitations

#########################################################################
## This is a sample controller
## - index is the default action of any application
## - user is required for authentication and authorization
## - download is for downloading files uploaded in the db (does streaming)
## - call exposes all registered services (none by default)
#########################################################################


def index():
    """
    example action using the internationalization operator T and flash
    rendered by views/default/index.html or views/generic.html

    if you need a simple wiki simply replace the two lines below with:
    return auth.wiki()
    """
    response.flash = T("Welcome to web2py!")
    rows=db(db.Tema).select()
    return locals()


def user():
    """
    exposes:
    http://..../[app]/default/user/login
    http://..../[app]/default/user/logout
    http://..../[app]/default/user/register
    http://..../[app]/default/user/profile
    http://..../[app]/default/user/retrieve_password
    http://..../[app]/default/user/change_password
    http://..../[app]/default/user/manage_users (requires membership in
    use @auth.requires_login()
        @auth.requires_membership('group name')
        @auth.requires_permission('read','table name',record_id)
    to decorate functions that need access control
    """
    return dict(form=auth())

@cache.action()
def download():
    """
    allows downloading of uploaded files
    http://..../[app]/default/download/[filename]
    """
    return response.download(request, db)


def call():
    """
    exposes services. for example:
    http://..../[app]/default/call/jsonrpc
    decorate with @services.jsonrpc the functions to expose
    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv
    """
    return service()


@auth.requires_signature()
def data():
    """
    http://..../[app]/default/data/tables
    http://..../[app]/default/data/create/[table]
    http://..../[app]/default/data/read/[table]/[id]
    http://..../[app]/default/data/update/[table]/[id]
    http://..../[app]/default/data/delete/[table]/[id]
    http://..../[app]/default/data/select/[table]
    http://..../[app]/default/data/search/[table]
    but URLs must be signed, i.e. linked with
      A('table',_href=URL('data/tables',user_signature=True))
    or with the signed load operator
      LOAD('default','data.load',args='tables',ajax=True,user_signature=True)
    """
    return dict(form=crud())

@auth.requires(auth.user_id==1 or request.client=='127.0.0.1', requires_login=True)
def GetTema():
    TituloTemp = request.args(0)
    Tema = db.Tema(Titulo=TituloTemp)
    if not Tema :
        session.flash=('Tema Inexistente')
        redirect(URL('index'))
    return Tema

@auth.requires(auth.user_id==1 or request.client=='127.0.0.1', requires_login=True)
def Tema():
    form=SQLFORM(db.Tema).process(next='Pregunta/[Titulo]')
    rows=db(db.Tema).select()
    return locals()

@auth.requires(auth.user_id==1 or request.client=='127.0.0.1', requires_login=True)
def Pregunta():
    Tema=GetTema()
    db.Pregunta.id_tema.default=Tema.id
    form=SQLFORM(db.Pregunta).process()
    rows = db(db.Pregunta.id_tema==Tema.id).select()
    return locals()

def Partida():
    Tema=GetTema()
    Partida=db.Partida.insert(id_tema=Tema.id)
    if Partida:
        redirect(URL('Equipo',args=Partida))
    else:
         session.flash=T('Problemas en query')
    return locals()

def Equipo():
    Partida=request.args(0)
    db.Equipo.Partida.default=Partida
    db.Equipo.score.default=0
    db.Equipo.racha.defualt=0
    form=SQLFORM(db.Equipo)
    if form.process().accepted:
        redirect(URL('Equipo',args=Partida))
    rows = db(db.Equipo.Partida==Partida).select()
    return locals()

def Juego():
    session.index=0
    session.PartidaID=request.args(0)
    session.Equipos=db(db.Equipo.Partida==session.PartidaID).select()
    session.Partida=db(db.Partida.id==session.PartidaID).select()
    session.Tema=db(db.Tema.id==session.Partida[0].id_tema).select()
    session.preguntas=db(db.Pregunta.id_tema==session.Partida[0].id_tema).select()
    return locals()

def JuegoPregunta():
    Pregunta=session.preguntas[session.index]
    session.Equipos=db(db.Equipo.Partida==session.PartidaID).select()
    return locals()

def SetScore():
    vars=request.get_vars
    print vars
    if vars:
          print 'entra al if'
          id=vars.id
          equipo=db.Equipo(id)
          if vars.direct=="down":
              racha=0
          else:
              racha=int(GetRacha(equipo.racha))

          print racha
          if equipo:
             equipo.update_record(score=equipo.score+(racha*100))
             equipo.update_record(racha=racha)
    return response.json([{'racha':racha},{'score':equipo.score}])

def GetRacha(racha):
    print 'racha'*racha
    if racha< 5:
        racha=racha+1
        print racha
    return str(racha)

def resultados():
   session.PartidaID=request.args(0)
   session.Equipos=db(db.Equipo.Partida==session.PartidaID).select()
   return locals()
